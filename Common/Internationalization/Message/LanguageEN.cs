// NOTICE:
// THIS FILE IS GENERATED BY ChatGPT
// THERES MANY ERRORS IN THIS FILE

namespace EggLink.DanhengServer.Internationalization.Message
{
    #region Root

    public class LanguageEN
    {
        public GameTextEN Game { get; } = new();
        public ServerTextEN Server { get; } = new();
        public WordTextEN Word { get; } = new();  // a placeholder for the actual word text
    }

    #endregion

    #region Layer 1

    /// <summary>
    /// path: Game
    /// </summary>
    public class GameTextEN
    {
        public CommandTextEN Command { get; } = new();
    }

    /// <summary>
    /// path: Server
    /// </summary>
    public class ServerTextEN
    {
        public WebTextEN Web { get; } = new();
        public ServerInfoTextEN ServerInfo { get; } = new();
    }

    /// <summary>
    /// path: Word
    /// </summary>
    public class WordTextEN
    {
        public string Rank { get; } = "Rank";
        public string Avatar { get; } = "Avatar";
        public string Material { get; } = "Material";
        public string Relic { get; } = "Relic";
        public string Equipment { get; } = "Light Cone";
        public string Talent { get; } = "Talent";
        public string Banner { get; } = "Gacha";
        public string Activity { get; } = "Activity";
        public string Buff { get; } = "Blessing";
        public string Miracle { get; } = "Curio";
        public string Unlock { get; } = "Luxury";

        // server info
        public string Config { get; } = "Config File";
        public string Language { get; } = "Language";
        public string Log { get; } = "Log";
        public string GameData { get; } = "Game Data";
        public string Database { get; } = "Database";
        public string Command { get; } = "Command";
        public string WebServer { get; } = "Web Server";
        public string Plugin { get; } = "Plugin";
        public string Handler { get; } = "Packet Handler";
        public string Dispatch { get; } = "Global Dispatch";
        public string Game { get; } = "Game";
        public string Handbook { get; } = "Handbook";
        public string NotFound { get; } = "Not Found";
        public string Error { get; } = "Error";
        public string FloorInfo { get; } = "Floor Info";
        public string FloorGroupInfo { get; } = "Floor Group Info";
        public string FloorMissingResult { get; } = "Teleportation and World Generation";
        public string FloorGroupMissingResult { get; } = "Teleportation, Monster Battles, and World Generation";
        public string Mission { get; } = "Mission";
        public string MissionInfo { get; } = "Mission Info";
        public string MazeSkill { get; } = "Maze Skill";
        public string MazeSkillInfo { get; } = "Maze Skill Info";
        public string Dialogue { get; } = "Simulated Universe Event";
        public string DialogueInfo { get; } = "Simulated Universe Event Info";
        public string Performance { get; } = "Performance";
        public string PerformanceInfo { get; } = "Performance Info";
        public string RogueChestMap { get; } = "Simulated Universe Map";
        public string RogueChestMapInfo { get; } = "Simulated Universe Map Info";
        public string ChessRogueRoom { get; } = "Simulated Universe DLC";
        public string ChessRogueRoomInfo { get; } = "Simulated Universe DLC Info";
    }

    #endregion

    #region Layer 2

    #region GameText

    /// <summary>
    /// path: Game.Command
    /// </summary>
    public class CommandTextEN
    {
        public NoticeTextEN Notice { get; } = new();

        public HeroTextEN Hero { get; } = new();
        public AvatarTextEN Avatar { get; } = new();
        public GiveTextEN Give { get; } = new();
        public GiveAllTextEN GiveAll { get; } = new();
        public LineupTextEN Lineup { get; } = new();
        public HelpTextEN Help { get; } = new();
        public KickTextEN Kick { get; } = new();
        public MissionTextEN Mission { get; } = new();
        public RelicTextEN Relic { get; } = new();
        public ReloadTextEN Reload { get; } = new();
        public RogueTextEN Rogue { get; } = new();
        public SceneTextEN Scene { get; } = new();
        public UnlockAllTextEN UnlockAll { get; } = new();
        public MailTextEN Mail { get; } = new();
        public RaidTextEN Raid { get; } = new();
    }

    #endregion

    #region ServerTextEN

    /// <summary>
    /// path: Server.Web
    /// </summary>
    public class WebTextEN
    {
    }

    /// <summary>
    /// path: Server.ServerInfo
    /// </summary>
    public class ServerInfoTextEN
    {
        public string Shutdown { get; } = "Shutting down...";
        public string CancelKeyPressed { get; } = "Cancel key pressed (Ctrl + C), server shutting down...";
        public string StartingServer { get; } = "Starting DanhengServer...";
        public string LoadingItem { get; } = "Loading {0}...";
        public string RegisterItem { get; } = "Registered {0} {1}(s).";
        public string FailedToLoadItem { get; } = "Failed to load {0}.";
        public string FailedToInitializeItem { get; } = "Failed to initialize {0}.";
        public string FailedToReadItem { get; } = "Failed to read {0}, file {1}";
        public string GeneratedItem { get; } = "Generated {0}.";
        public string LoadedItem { get; } = "Loaded {0}.";
        public string LoadedItems { get; } = "Loaded {0} {1}(s).";
        public string ServerRunning { get; } = "{0} server listening on {1}";
        public string ServerStarted { get; } = "Startup complete! Took {0}s, better than 99% of users. Type 'help' for command help";  // This is a meme, consider localizing in English
        public string MissionEnabled { get; } = "Mission system enabled. This feature is still in development and may not work as expected. Please report any bugs to the developers.";

        public string ConfigMissing { get; } = "{0} is missing. Please check your resource folder: {1}, {2} may not be available.";
        public string UnloadedItems { get; } = "Unloaded all {0}.";
        public string SaveDatabase { get; } = "Database saved in {0}s";
    }


    #endregion

    #endregion

    #region Layer 3

    #region CommandText

    /// <summary>
    /// path: Game.Command.Notice
    /// </summary>
    public class NoticeTextEN
    {
        public string PlayerNotFound { get; } = "Player not found!";
        public string InvalidArguments { get; } = "Invalid arguments!";
        public string NoPermission { get; } = "You do not have permission to do this!";
        public string CommandNotFound { get; } = "Command not found! Type '/help' to get help.";
        public string TargetNotFound { get; } = "Target {0} not found!";
        public string TargetOffline { get; } = "Target {0}({1}) is offline! Clear the target.";
        public string TargetFound { get; } = "Online player {0}({1}) is found, the next command will target it by default.";
        public string InternalError { get; } = "An error occurred while executing the command!";
    }

    /// <summary>
    /// path: Game.Command.Hero
    /// </summary>
    public class HeroTextEN
    {
        public string Desc { get; } = "Switch the gender/type of the main character";
        public string Usage { get; } = "/hero <gender [1/2 - 1 for male, 2 for female]>/<type [8001/8003/8005 - corresponding to Destruction, Preservation, Harmony]>";
        public string GenderNotSpecified { get; } = "Gender does not exist!";
        public string HeroTypeNotSpecified { get; } = "Main character type does not exist!";
        public string GenderChanged { get; } = "Gender has been changed!";
        public string HeroTypeChanged { get; } = "Main character type has been changed!";
    }

    /// <summary>
    /// path: Game.Command.UnlockAll
    /// </summary>
    public class UnlockAllTextEN
    {
        public string Desc { get; } = "Unlock all objects in the category";
        public string Usage { get; } = "/unlockall <mission - mission for tasks>";
        public string AllMissionsUnlocked { get; } = "All tasks have been unlocked!";
    }

    /// <summary>
    /// path: Game.Command.Avatar
    /// </summary>
    public class AvatarTextEN
    {
        public string Desc { get; } = "Set the properties of the player's existing characters";
        public string Usage { get; } = "/avatar <talent [character ID/-1] [path level] - set path level; character ID -1 means all owned characters>/<get [character ID] - get character>/<rank [character ID/-1] [star soul]>/<level [character ID/-1] [character level]>";
        public string InvalidLevel { get; } = "Invalid {0} level";
        public string AllAvatarsLevelSet { get; } = "Set all characters' {0} level to {1}";
        public string AvatarLevelSet { get; } = "Set character {0}'s {1} level to {2}";
        public string AvatarNotFound { get; } = "Character does not exist!";
        public string AvatarGet { get; } = "Obtained character {0}!";
        public string AvatarFailedGet { get; } = "Failed to obtain character {0}!";
    }

    /// <summary>
    /// path: Game.Command.Give
    /// </summary>
    public class GiveTextEN
    {
        public string Desc { get; } = "Give player items";
        public string Usage { get; } = "/give <item ID> l<level> x<quantity> r<stack>";
        public string ItemNotFound { get; } = "Item not found!";
        public string GiveItem { get; } = "Gave @{0} {1} item(s) {2}";
    }

    /// <summary>
    /// path: Game.Command.GiveAll
    /// </summary>
    public class GiveAllTextEN
    {
        public string Desc { get; } = "Give the player all specified types of items";
        public string Usage { get; } = "/giveall <avatar - character/equipment - light cone/relic - relic/unlock - luxury item> r<stack> l<level> x<quantity>";
        public string GiveAllItems { get; } = "Gave all {0}, each {1} items";
    }

    /// <summary>
    /// path: Game.Command.Lineup
    /// </summary>
    public class LineupTextEN
    {
        public string Desc { get; } = "Manage player's lineup";
        public string Usage { get; } = "/lineup <mp [number of skill points - up to two]>/<heal - heal>";
        public string PlayerGainedMp { get; } = "Player gained {0} skill points";
        public string HealedAllAvatars { get; } = "Successfully healed all characters in the current lineup";
    }

    /// <summary>
    /// path: Game.Command.Help
    /// </summary>
    public class HelpTextEN
    {
        public string Desc { get; } = "Show help information";
        public string Usage { get; } = "/help";
        public string Commands { get; } = "Commands:";
        public string CommandUsage { get; } = "Usage: ";
    }

    /// <summary>
    /// path: Game.Command.Kick
    /// </summary>
    public class KickTextEN
    {
        public string Desc { get; } = "Kick out player";
        public string Usage { get; } = "/kick";
        public string PlayerKicked { get; } = "Player {0} has been kicked out!";
    }

    /// <summary>
    /// path: Game.Command.Mission
    /// </summary>
    public class MissionTextEN
    {
        public string Desc { get; } = "Manage player's tasks";
        public string Usage { get; } = "/mission <unlockall - complete all tasks>/<pass - complete all ongoing tasks>/<finish [subtask ID] - complete specified task>/<running - get ongoing and possibly stuck tasks>/<reaccept [main task ID] - restart specified main task>";
        public string AllMissionsFinished { get; } = "All tasks have been completed!";
        public string AllRunningMissionsFinished { get; } = "A total of {0} ongoing tasks have been completed!";
        public string MissionFinished { get; } = "Task {0} has been completed!";
        public string InvalidMissionId { get; } = "Invalid task ID!";
        public string NoRunningMissions { get; } = "No ongoing tasks!";

        public string RunningMissions { get; } = "Ongoing tasks:";
        public string PossibleStuckMissions { get; } = "Possibly stuck tasks:";
        public string MainMission { get; } = "Main task";

        public string MissionReAccepted { get; } = "Reaccepted task {0}!";
    }

    /// <summary>
    /// path: Game.Command.Relic
    /// </summary>
    public class RelicTextEN
    {
        public string Desc { get; } = "Manage player's relics";
        public string Usage { get; } = "/relic <relic ID> <main affix ID> <sub affix ID1:sub affix level> <sub affix ID2:sub affix level> <sub affix ID3:sub affix level> <sub affix ID4:sub affix level> l<level> x<quantity>";
        public string RelicNotFound { get; } = "Relic does not exist!";
        public string InvalidMainAffixId { get; } = "Invalid main affix ID";
        public string InvalidSubAffixId { get; } = "Invalid sub affix ID";
        public string RelicGiven { get; } = "Gave player @{0} {1} relic(s) {2}, main affix {3}";
    }

    /// <summary>
    /// path: Game.Command.Reload
    /// </summary>
    public class ReloadTextEN
    {
        public string Desc { get; } = "Reload specified configuration";
        public string Usage { get; } = "/reload <config name>(banner - gacha, activity - event)";
        public string ConfigReloaded { get; } = "Configuration {0} has been reloaded!";
    }

    /// <summary>
    /// path: Game.Command.Rogue
    /// </summary>
    public class RogueTextEN
    {
        public string Desc { get; } = "Manage player's data in the simulated universe";
        public string Usage { get; } = "/rogue <money [number of cosmic fragments]>/<buff [blessing ID/-1 (-1 for all blessings)]>/<miracle [curio ID]>/<enhance [blessing ID/-1]>/<unstuck - leave event>";
        public string PlayerGainedMoney { get; } = "Player gained {0} cosmic fragments";
        public string PlayerGainedAllItems { get; } = "Player gained all {0}";
        public string PlayerGainedItem { get; } = "Player gained {0} {1}";
        public string PlayerEnhancedBuff { get; } = "Player enhanced blessing {0}";
        public string PlayerEnhancedAllBuffs { get; } = "Player enhanced all blessings";
        public string PlayerUnstuck { get; } = "Player unstuck from event";
        public string NotFoundItem { get; } = "{0} not found!";
    }

    /// <summary>
    /// path: Game.Command.Scene
    /// </summary>
    public class SceneTextEN
    {
        public string Desc { get; } = "Manage player's scenes";
        public string Usage { get; } = "/scene <prop [group ID] [prop ID] [state] - set prop state>/<remove [entity ID] - remove entity>/<unlockall - unlock all props>/<change [scene entrance ID] - enter specified scene>/<reload - re-enter scene>";
        public string LoadedGroups { get; } = "Loaded groups: {0}";
        public string PropStateChanged { get; } = "Prop: {0} state set to {1}";
        public string PropNotFound { get; } = "Prop not found!";
        public string EntityRemoved { get; } = "Entity {0} has been removed";
        public string EntityNotFound { get; } = "Entity not found!";
        public string AllPropsUnlocked { get; } = "All props have been unlocked!";
        public string SceneChanged { get; } = "Entered scene {0}";
        public string SceneReloaded { get; } = "Scene has been reloaded!";
        public string SceneReset { get; } = "The prop state in floor {0} has been reset!";
    }

    /// <summary>
    /// path: Game.Command.Mail
    /// </summary>
    public class MailTextEN
    {
        public string Desc { get; } = "Manage player's mails";
        public string Usage { get; } = "/mail <send [Sender Name] [Title] [Content] [Template ID] [Expire Days] - Send Mail>/<send [Sender] [Title] [Content] [Template ID] [Expire Days] [Attachments] - Send Mail with attachment>";
        public string MailSent { get; } = "Mail has been sent!";
        public string MailSentWithAttachment { get; } = "Mail with attachments has been sent!";
    }

    /// <summary>
    /// path: Game.Command.Raid
    /// </summary>
    public class RaidTextEN
    {
        public string Desc { get; } = "Manage player's temporary scene";
        public string Usage { get; } = "/raid <leave - leave temporary scene>";
        public string Leaved { get; } = "Leaved temporary scene!";
    }

    #endregion

    #endregion
}
